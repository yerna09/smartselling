#!/usr/bin/env python3
"""
Script de prueba completo para SmartSelling con Mercado Libre
Prueba todos los endpoints y el flujo completo de integraci√≥n
"""

import requests
import json
import time
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
API_BASE = os.getenv('API_URL', 'https://api-test.smartselling.com.ar')
# Solo usar localhost si estamos expl√≠citamente en desarrollo
if os.getenv('FLASK_ENV') == 'development' and 'localhost' in API_BASE:
    API_BASE = 'http://localhost:8000'

ML_CLIENT_ID = os.getenv('ML_CLIENT_ID', '2582847439583264')

class SmartSellingMLTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_data = None
        self.test_username = f"test_user_{int(time.time())}"
        self.test_password = "TestPass123!"
        
    def log(self, message, level="INFO"):
        """Log con formato"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def test_server_connection(self):
        """Verificar que el servidor est√© disponible"""
        self.log("üîå Verificando conexi√≥n al servidor...")
        
        try:
            response = self.session.get(f"{API_BASE}/", timeout=10)
            if response.status_code == 200:
                self.log("‚úÖ Servidor conectado correctamente", "SUCCESS")
                return True
            else:
                self.log(f"‚ùå Servidor respondi√≥ con c√≥digo: {response.status_code}", "ERROR")
                return False
        except requests.exceptions.ConnectionError:
            self.log("‚ùå No se puede conectar al servidor", "ERROR")
            self.log("üí° Aseg√∫rate de que est√© corriendo: python app.py", "HINT")
            return False
        except Exception as e:
            self.log(f"‚ùå Error de conexi√≥n: {e}", "ERROR")
            return False
    
    def test_user_registration(self):
        """Probar registro de usuario"""
        self.log(f"üë§ Registrando usuario: {self.test_username}")
        
        try:
            response = self.session.post(f"{API_BASE}/register", 
                                       json={
                                           "username": self.test_username,
                                           "password": self.test_password
                                       })
            
            if response.status_code in [200, 201]:
                self.user_data = response.json()
                self.log("‚úÖ Usuario registrado exitosamente", "SUCCESS")
                return True
            else:
                error_msg = response.json().get('message', 'Error desconocido')
                self.log(f"‚ùå Error en registro: {error_msg}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error en registro: {e}", "ERROR")
            return False
    
    def test_user_login(self):
        """Probar login de usuario"""
        self.log(f"üîë Iniciando sesi√≥n: {self.test_username}")
        
        try:
            response = self.session.post(f"{API_BASE}/login",
                                       json={
                                           "username": self.test_username,
                                           "password": self.test_password
                                       })
            
            if response.status_code == 200:
                self.user_data = response.json()
                self.log("‚úÖ Login exitoso", "SUCCESS")
                
                # Extraer token de cookies si est√° disponible
                if 'token' in response.cookies:
                    self.token = response.cookies['token']
                    self.log(f"üé´ Token obtenido: {self.token[:20]}...", "SUCCESS")
                
                return True
            else:
                error_msg = response.json().get('message', 'Error desconocido')
                self.log(f"‚ùå Error en login: {error_msg}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error en login: {e}", "ERROR")
            return False
    
    def test_user_profile(self):
        """Probar obtener perfil de usuario"""
        self.log("üë§ Obteniendo perfil de usuario...")
        
        headers = {}
        if self.token:
            headers['x-access-token'] = self.token
            
        try:
            response = self.session.get(f"{API_BASE}/profile", headers=headers)
            
            if response.status_code == 200:
                profile_data = response.json()
                self.log("‚úÖ Perfil obtenido exitosamente", "SUCCESS")
                self.log(f"   Usuario: {profile_data.get('username')}")
                self.log(f"   ID: {profile_data.get('user_id')}")
                self.log(f"   ML vinculado: {profile_data.get('ml_linked', False)}")
                return True
            else:
                error_msg = response.json().get('message', 'Error desconocido')
                self.log(f"‚ùå Error obteniendo perfil: {error_msg}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error obteniendo perfil: {e}", "ERROR")
            return False
    
    def test_ml_auth_url(self):
        """Probar obtener URL de autorizaci√≥n de ML"""
        self.log("üîó Obteniendo URL de autorizaci√≥n de Mercado Libre...")
        
        headers = {}
        if self.token:
            headers['x-access-token'] = self.token
            
        try:
            response = self.session.get(f"{API_BASE}/mercadolibre/auth", headers=headers)
            
            if response.status_code == 200:
                auth_data = response.json()
                auth_url = auth_data.get('auth_url')
                self.log("‚úÖ URL de autorizaci√≥n obtenida", "SUCCESS")
                self.log(f"üåê URL: {auth_url}")
                
                # Verificar que la URL contenga los par√°metros correctos
                if ML_CLIENT_ID in auth_url:
                    self.log("‚úÖ Client ID correcto en URL", "SUCCESS")
                else:
                    self.log("‚ö†Ô∏è Client ID no encontrado en URL", "WARNING")
                
                if "api-test.smartselling.com.ar/loading" in auth_url:
                    self.log("‚úÖ Redirect URI correcto", "SUCCESS")
                else:
                    self.log("‚ö†Ô∏è Redirect URI no encontrado", "WARNING")
                
                return True
            else:
                error_msg = response.json().get('message', 'Error desconocido')
                self.log(f"‚ùå Error obteniendo URL ML: {error_msg}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error obteniendo URL ML: {e}", "ERROR")
            return False
    
    def test_ml_data_without_auth(self):
        """Probar obtener datos ML sin autorizaci√≥n (debe fallar)"""
        self.log("üìä Probando obtener datos ML sin autorizaci√≥n...")
        
        headers = {}
        if self.token:
            headers['x-access-token'] = self.token
            
        try:
            response = self.session.get(f"{API_BASE}/mercadolibre/data", headers=headers)
            
            if response.status_code == 400:
                error_msg = response.json().get('message', '')
                if 'not linked' in error_msg.lower():
                    self.log("‚úÖ Error esperado: ML no vinculado", "SUCCESS")
                    return True
                
            self.log(f"‚ö†Ô∏è Respuesta inesperada: {response.status_code}", "WARNING")
            self.log(f"   Mensaje: {response.json().get('message', 'Sin mensaje')}")
            return True  # No es un error cr√≠tico
            
        except Exception as e:
            self.log(f"‚ùå Error probando datos ML: {e}", "ERROR")
            return False
    
    def test_configuration(self):
        """Verificar configuraci√≥n del proyecto"""
        self.log("‚öôÔ∏è Verificando configuraci√≥n...")
        
        config_items = [
            ("ML_CLIENT_ID", ML_CLIENT_ID, "2582847439583264"),
            ("API_BASE", API_BASE, "http://localhost:8000"),
        ]
        
        all_good = True
        for name, current, expected in config_items:
            if current == expected:
                self.log(f"‚úÖ {name}: {current}", "SUCCESS")
            else:
                self.log(f"‚ö†Ô∏è {name}: {current} (esperado: {expected})", "WARNING")
                if name == "ML_CLIENT_ID" and current == "TU_CLIENT_ID":
                    self.log("‚ùå Client ID no configurado correctamente", "ERROR")
                    all_good = False
        
        return all_good
    
    def test_logout(self):
        """Probar logout"""
        self.log("üö™ Cerrando sesi√≥n...")
        
        headers = {}
        if self.token:
            headers['x-access-token'] = self.token
            
        try:
            response = self.session.post(f"{API_BASE}/logout", headers=headers)
            
            if response.status_code == 200:
                self.log("‚úÖ Logout exitoso", "SUCCESS")
                self.token = None
                return True
            else:
                error_msg = response.json().get('message', 'Error desconocido')
                self.log(f"‚ùå Error en logout: {error_msg}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error en logout: {e}", "ERROR")
            return False
    
    def run_all_tests(self):
        """Ejecutar toda la suite de pruebas"""
        self.log("üöÄ Iniciando suite completa de pruebas SmartSelling", "START")
        self.log(f"üéØ API Base: {API_BASE}")
        self.log(f"üîë ML Client ID: {ML_CLIENT_ID}")
        print("=" * 80)
        
        tests = [
            ("Conexi√≥n servidor", self.test_server_connection),
            ("Configuraci√≥n", self.test_configuration),
            ("Registro usuario", self.test_user_registration),
            ("Login usuario", self.test_user_login),
            ("Perfil usuario", self.test_user_profile),
            ("URL autorizaci√≥n ML", self.test_ml_auth_url),
            ("Datos ML sin auth", self.test_ml_data_without_auth),
            ("Logout", self.test_logout),
        ]
        
        results = []
        
        for test_name, test_func in tests:
            self.log(f"\nüß™ Ejecutando: {test_name}")
            try:
                result = test_func()
                status = "‚úÖ PASS" if result else "‚ùå FAIL"
                results.append((test_name, status, None))
                self.log(f"Resultado: {status}")
            except Exception as e:
                error_msg = str(e)
                results.append((test_name, "üí• ERROR", error_msg))
                self.log(f"üí• ERROR: {error_msg}", "ERROR")
        
        # Resumen final
        print("\n" + "=" * 80)
        self.log("üìä RESUMEN DE PRUEBAS:", "SUMMARY")
        
        passed = 0
        for test_name, status, error in results:
            print(f"   {test_name:<25} {status}")
            if error:
                print(f"      Error: {error}")
            if "‚úÖ" in status:
                passed += 1
        
        total = len(results)
        print(f"\nüéØ RESULTADO FINAL: {passed}/{total} pruebas exitosas")
        
        if passed == total:
            self.log("üéâ ¬°Todas las pruebas pasaron!", "SUCCESS")
            self.log("‚ú® El sistema est√° listo para usar", "SUCCESS")
        else:
            self.log(f"‚ö†Ô∏è {total - passed} pruebas fallaron", "WARNING")
        
        print("\n" + "=" * 80)
        self.log("üìù PR√ìXIMOS PASOS:", "INFO")
        print("   1. Para probar ML completo, haz clic en 'Vincular ML' en el frontend")
        print("   2. Autoriza en Mercado Libre")
        print("   3. Verifica que los datos se obtengan correctamente")
        print("   4. Para despliegue: sigue las instrucciones en DEPLOY_VPS.md")

def main():
    """Funci√≥n principal"""
    print("üîß SmartSelling - Suite de Pruebas Completa")
    print(f"üìÖ {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    test_suite = SmartSellingMLTest()
    test_suite.run_all_tests()

if __name__ == "__main__":
    main()
